/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type CertificateStruct = {
  id: PromiseOrValue<BigNumberish>;
  issuer: PromiseOrValue<string>;
  applicant: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
  accreditationId: PromiseOrValue<BigNumberish>;
  level: PromiseOrValue<string>;
  eventId: PromiseOrValue<string>;
  remarks: PromiseOrValue<string>;
  isRevoked: PromiseOrValue<boolean>;
  revokeReason: PromiseOrValue<string>;
  revokeTime: PromiseOrValue<BigNumberish>;
};

export type CertificateStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  boolean,
  string,
  BigNumber
] & {
  id: BigNumber;
  issuer: string;
  applicant: string;
  createdAt: BigNumber;
  accreditationId: BigNumber;
  level: string;
  eventId: string;
  remarks: string;
  isRevoked: boolean;
  revokeReason: string;
  revokeTime: BigNumber;
};

export type IssuerStruct = {
  name: PromiseOrValue<string>;
  issuerAddress: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  logoUrl: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
};

export type IssuerStructOutput = [string, string, string, string, BigNumber] & {
  name: string;
  issuerAddress: string;
  description: string;
  logoUrl: string;
  createdAt: BigNumber;
};

export type ApplicantStruct = {
  name: PromiseOrValue<string>;
  applicantAddress: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
};

export type ApplicantStructOutput = [string, string, BigNumber] & {
  name: string;
  applicantAddress: string;
  createdAt: BigNumber;
};

export type AccreditationStruct = {
  id: PromiseOrValue<BigNumberish>;
  issuer: PromiseOrValue<string>;
  title: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
  duration: PromiseOrValue<BigNumberish>;
  nature: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  isRevoked: PromiseOrValue<boolean>;
  revokeReason: PromiseOrValue<string>;
  revokeTime: PromiseOrValue<BigNumberish>;
};

export type AccreditationStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean,
  string,
  BigNumber
] & {
  id: BigNumber;
  issuer: string;
  title: string;
  createdAt: BigNumber;
  duration: BigNumber;
  nature: string;
  description: string;
  isRevoked: boolean;
  revokeReason: string;
  revokeTime: BigNumber;
};

export type CompleteCertStruct = {
  issuer: IssuerStruct;
  applicant: ApplicantStruct;
  accreditation: AccreditationStruct;
  certificate: CertificateStruct;
};

export type CompleteCertStructOutput = [
  IssuerStructOutput,
  ApplicantStructOutput,
  AccreditationStructOutput,
  CertificateStructOutput
] & {
  issuer: IssuerStructOutput;
  applicant: ApplicantStructOutput;
  accreditation: AccreditationStructOutput;
  certificate: CertificateStructOutput;
};

export interface CertificateEndpointInterface extends utils.Interface {
  functions: {
    "getCertificateById(uint256)": FunctionFragment;
    "getCompleteCertById(uint256)": FunctionFragment;
    "issueCertificate(address,address,uint256,uint256,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCertificateById"
      | "getCompleteCertById"
      | "issueCertificate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCertificateById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompleteCertById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCertificateById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompleteCertById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;

  events: {
    "IssueCertificate(uint256,address,address,uint256,uint256,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IssueCertificate"): EventFragment;
}

export interface IssueCertificateEventObject {
  id: BigNumber;
  issuerAddress: string;
  applicantAddress: string;
  createdAt: BigNumber;
  accreditationId: BigNumber;
  level: string;
  eventId: string;
  remarks: string;
}
export type IssueCertificateEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string, string],
  IssueCertificateEventObject
>;

export type IssueCertificateEventFilter =
  TypedEventFilter<IssueCertificateEvent>;

export interface CertificateEndpoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificateEndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCertificateById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CertificateStructOutput]>;

    getCompleteCertById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CompleteCertStructOutput]>;

    issueCertificate(
      issuerAddress: PromiseOrValue<string>,
      applicantAddress: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      accreditationId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<string>,
      eventId: PromiseOrValue<string>,
      remarks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCertificateById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CertificateStructOutput>;

  getCompleteCertById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CompleteCertStructOutput>;

  issueCertificate(
    issuerAddress: PromiseOrValue<string>,
    applicantAddress: PromiseOrValue<string>,
    createdAt: PromiseOrValue<BigNumberish>,
    accreditationId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<string>,
    eventId: PromiseOrValue<string>,
    remarks: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCertificateById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CertificateStructOutput>;

    getCompleteCertById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CompleteCertStructOutput>;

    issueCertificate(
      issuerAddress: PromiseOrValue<string>,
      applicantAddress: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      accreditationId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<string>,
      eventId: PromiseOrValue<string>,
      remarks: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "IssueCertificate(uint256,address,address,uint256,uint256,string,string,string)"(
      id?: null,
      issuerAddress?: null,
      applicantAddress?: null,
      createdAt?: null,
      accreditationId?: null,
      level?: null,
      eventId?: null,
      remarks?: null
    ): IssueCertificateEventFilter;
    IssueCertificate(
      id?: null,
      issuerAddress?: null,
      applicantAddress?: null,
      createdAt?: null,
      accreditationId?: null,
      level?: null,
      eventId?: null,
      remarks?: null
    ): IssueCertificateEventFilter;
  };

  estimateGas: {
    getCertificateById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompleteCertById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueCertificate(
      issuerAddress: PromiseOrValue<string>,
      applicantAddress: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      accreditationId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<string>,
      eventId: PromiseOrValue<string>,
      remarks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCertificateById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompleteCertById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueCertificate(
      issuerAddress: PromiseOrValue<string>,
      applicantAddress: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      accreditationId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<string>,
      eventId: PromiseOrValue<string>,
      remarks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
