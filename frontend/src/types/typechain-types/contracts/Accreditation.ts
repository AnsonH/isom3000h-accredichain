/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Accreditation {
  export type CertificateStruct = {
    certId: PromiseOrValue<BigNumberish>;
    issuer: PromiseOrValue<string>;
    applicant: PromiseOrValue<string>;
    nftAddress: PromiseOrValue<string>;
    isTransfered: PromiseOrValue<boolean>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type CertificateStructOutput = [
    BigNumber,
    string,
    string,
    string,
    boolean,
    BigNumber
  ] & {
    certId: BigNumber;
    issuer: string;
    applicant: string;
    nftAddress: string;
    isTransfered: boolean;
    createdAt: BigNumber;
  };
}

export interface AccreditationInterface extends utils.Interface {
  functions: {
    "createCertificate(address)": FunctionFragment;
    "transferCertificate(uint256,address)": FunctionFragment;
    "verifyCertificate(uint256,address)": FunctionFragment;
    "viewCertificate(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createCertificate"
      | "transferCertificate"
      | "verifyCertificate"
      | "viewCertificate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCertificate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCertificate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCertificate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCertificate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Accreditation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccreditationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createCertificate(
      _nftAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferCertificate(
      _certId: PromiseOrValue<BigNumberish>,
      _applicantAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyCertificate(
      _ownerAddress: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewCertificate(
      _applicantAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Accreditation.CertificateStructOutput[]]>;
  };

  createCertificate(
    _nftAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferCertificate(
    _certId: PromiseOrValue<BigNumberish>,
    _applicantAddr: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyCertificate(
    _ownerAddress: PromiseOrValue<BigNumberish>,
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewCertificate(
    _applicantAddress: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Accreditation.CertificateStructOutput[]>;

  callStatic: {
    createCertificate(
      _nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCertificate(
      _certId: PromiseOrValue<BigNumberish>,
      _applicantAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyCertificate(
      _ownerAddress: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    viewCertificate(
      _applicantAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Accreditation.CertificateStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    createCertificate(
      _nftAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferCertificate(
      _certId: PromiseOrValue<BigNumberish>,
      _applicantAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyCertificate(
      _ownerAddress: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewCertificate(
      _applicantAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCertificate(
      _nftAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferCertificate(
      _certId: PromiseOrValue<BigNumberish>,
      _applicantAddr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyCertificate(
      _ownerAddress: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewCertificate(
      _applicantAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
