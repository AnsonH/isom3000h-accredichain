/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type IssuerStruct = {
  name: PromiseOrValue<string>;
  issuerAddress: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  logoUrl: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
};

export type IssuerStructOutput = [string, string, string, string, BigNumber] & {
  name: string;
  issuerAddress: string;
  description: string;
  logoUrl: string;
  createdAt: BigNumber;
};

export interface IssuerStorageInterface extends utils.Interface {
  functions: {
    "createIssuer(address,string,string,string)": FunctionFragment;
    "getIssuerByAddress(address)": FunctionFragment;
    "isIssuerExists(address)": FunctionFragment;
    "setAddresses(address,address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createIssuer"
      | "getIssuerByAddress"
      | "isIssuerExists"
      | "setAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createIssuer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuerExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIssuerExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IssuerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IssuerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createIssuer(
      inputAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getIssuerByAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IssuerStructOutput]>;

    isIssuerExists(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAddresses(
      accreditationStorageAddress: PromiseOrValue<string>,
      certificateStorageAddress: PromiseOrValue<string>,
      issuerEndpointAddress: PromiseOrValue<string>,
      certificateEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createIssuer(
    inputAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    logoUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getIssuerByAddress(
    inputAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IssuerStructOutput>;

  isIssuerExists(
    inputAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAddresses(
    accreditationStorageAddress: PromiseOrValue<string>,
    certificateStorageAddress: PromiseOrValue<string>,
    issuerEndpointAddress: PromiseOrValue<string>,
    certificateEndpointAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createIssuer(
      inputAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      logoUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IssuerStructOutput>;

    getIssuerByAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IssuerStructOutput>;

    isIssuerExists(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAddresses(
      accreditationStorageAddress: PromiseOrValue<string>,
      certificateStorageAddress: PromiseOrValue<string>,
      issuerEndpointAddress: PromiseOrValue<string>,
      certificateEndpointAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createIssuer(
      inputAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getIssuerByAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuerExists(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddresses(
      accreditationStorageAddress: PromiseOrValue<string>,
      certificateStorageAddress: PromiseOrValue<string>,
      issuerEndpointAddress: PromiseOrValue<string>,
      certificateEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createIssuer(
      inputAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getIssuerByAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuerExists(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddresses(
      accreditationStorageAddress: PromiseOrValue<string>,
      certificateStorageAddress: PromiseOrValue<string>,
      issuerEndpointAddress: PromiseOrValue<string>,
      certificateEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
