/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type AccreditationStruct = {
  id: PromiseOrValue<BigNumberish>;
  issuer: PromiseOrValue<string>;
  title: PromiseOrValue<string>;
  createdAt: PromiseOrValue<BigNumberish>;
  duration: PromiseOrValue<BigNumberish>;
  nature: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  isRevoked: PromiseOrValue<boolean>;
  revokeReason: PromiseOrValue<string>;
  revokeTime: PromiseOrValue<BigNumberish>;
};

export type AccreditationStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean,
  string,
  BigNumber
] & {
  id: BigNumber;
  issuer: string;
  title: string;
  createdAt: BigNumber;
  duration: BigNumber;
  nature: string;
  description: string;
  isRevoked: boolean;
  revokeReason: string;
  revokeTime: BigNumber;
};

export interface AccreditationStorageInterface extends utils.Interface {
  functions: {
    "createAccreditation(uint256,address,string,uint256,uint256,string,string)": FunctionFragment;
    "getAccreditationById(uint256)": FunctionFragment;
    "getAccreditationsByIssuerAddress(address)": FunctionFragment;
    "isAccreditationExists(uint256)": FunctionFragment;
    "revokeAccreditationById(uint256,string,uint256)": FunctionFragment;
    "setAddresses(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createAccreditation"
      | "getAccreditationById"
      | "getAccreditationsByIssuerAddress"
      | "isAccreditationExists"
      | "revokeAccreditationById"
      | "setAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAccreditation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccreditationById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccreditationsByIssuerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccreditationExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccreditationById",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAccreditation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccreditationById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccreditationsByIssuerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccreditationExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccreditationById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AccreditationStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccreditationStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAccreditation(
      newAccredId: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nature: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AccreditationStructOutput]>;

    getAccreditationsByIssuerAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AccreditationStructOutput[]]>;

    isAccreditationExists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      revokeReason: PromiseOrValue<string>,
      revokeTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      accreditationNFTAddress: PromiseOrValue<string>,
      accreditationEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createAccreditation(
    newAccredId: PromiseOrValue<BigNumberish>,
    issuer: PromiseOrValue<string>,
    title: PromiseOrValue<string>,
    createdAt: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    nature: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccreditationById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AccreditationStructOutput>;

  getAccreditationsByIssuerAddress(
    inputAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccreditationStructOutput[]>;

  isAccreditationExists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeAccreditationById(
    id: PromiseOrValue<BigNumberish>,
    revokeReason: PromiseOrValue<string>,
    revokeTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    accreditationNFTAddress: PromiseOrValue<string>,
    accreditationEndpointAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAccreditation(
      newAccredId: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nature: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AccreditationStructOutput>;

    getAccreditationsByIssuerAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccreditationStructOutput[]>;

    isAccreditationExists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      revokeReason: PromiseOrValue<string>,
      revokeTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAddresses(
      accreditationNFTAddress: PromiseOrValue<string>,
      accreditationEndpointAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createAccreditation(
      newAccredId: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nature: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccreditationsByIssuerAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccreditationExists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      revokeReason: PromiseOrValue<string>,
      revokeTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      accreditationNFTAddress: PromiseOrValue<string>,
      accreditationEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAccreditation(
      newAccredId: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nature: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccreditationsByIssuerAddress(
      inputAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccreditationExists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAccreditationById(
      id: PromiseOrValue<BigNumberish>,
      revokeReason: PromiseOrValue<string>,
      revokeTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      accreditationNFTAddress: PromiseOrValue<string>,
      accreditationEndpointAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
