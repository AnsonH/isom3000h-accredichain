/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Accreditation,
  AccreditationInterface,
} from "../../contracts/Accreditation";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
    ],
    name: "createCertificate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_certId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_applicantAddr",
        type: "address",
      },
    ],
    name: "transferCertificate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ownerAddress",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
    ],
    name: "verifyCertificate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_applicantAddress",
        type: "uint256",
      },
    ],
    name: "viewCertificate",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "certId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "applicant",
            type: "address",
          },
          {
            internalType: "address",
            name: "nftAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isTransfered",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Accreditation.Certificate[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600081905550610614806100286000396000f3fe60806040526004361061003f5760003560e01c806329027aec1461004457806394b4652514610060578063a535cd3d1461009d578063cf3ae934146100da575b600080fd5b61005e6004803603810190610059919061033e565b6100f6565b005b34801561006c57600080fd5b50610087600480360381019061008291906103a1565b6102a4565b60405161009491906103fc565b60405180910390f35b3480156100a957600080fd5b506100c460048036038101906100bf9190610417565b6102ac565b6040516100d191906105bc565b60405180910390f35b6100f460048036038101906100ef91906103a1565b6102b3565b005b61010060016102b7565b600061010c60016102cd565b90506040518060c001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200142815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff02191690831515021790555060a082015181600401559050505050565b600092915050565b6060919050565b5050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061030b826102e0565b9050919050565b61031b81610300565b811461032657600080fd5b50565b60008135905061033881610312565b92915050565b600060208284031215610354576103536102db565b5b600061036284828501610329565b91505092915050565b6000819050919050565b61037e8161036b565b811461038957600080fd5b50565b60008135905061039b81610375565b92915050565b600080604083850312156103b8576103b76102db565b5b60006103c68582860161038c565b92505060206103d785828601610329565b9150509250929050565b60008115159050919050565b6103f6816103e1565b82525050565b600060208201905061041160008301846103ed565b92915050565b60006020828403121561042d5761042c6102db565b5b600061043b8482850161038c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6104798161036b565b82525050565b600061048a826102e0565b9050919050565b61049a8161047f565b82525050565b6104a981610300565b82525050565b6104b8816103e1565b82525050565b60c0820160008201516104d46000850182610470565b5060208201516104e76020850182610491565b5060408201516104fa6040850182610491565b50606082015161050d60608501826104a0565b50608082015161052060808501826104af565b5060a082015161053360a0850182610470565b50505050565b600061054583836104be565b60c08301905092915050565b6000602082019050919050565b600061056982610444565b610573818561044f565b935061057e83610460565b8060005b838110156105af5781516105968882610539565b97506105a183610551565b925050600181019050610582565b5085935050505092915050565b600060208201905081810360008301526105d6818461055e565b90509291505056fea2646970667358221220208b18c49858582e4fb6dbadfba41926e1ff3360a988f9a3ea63b19a58d3fa2964736f6c63430008090033";

type AccreditationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccreditationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Accreditation__factory extends ContractFactory {
  constructor(...args: AccreditationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Accreditation> {
    return super.deploy(overrides || {}) as Promise<Accreditation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Accreditation {
    return super.attach(address) as Accreditation;
  }
  override connect(signer: Signer): Accreditation__factory {
    return super.connect(signer) as Accreditation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccreditationInterface {
    return new utils.Interface(_abi) as AccreditationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accreditation {
    return new Contract(address, _abi, signerOrProvider) as Accreditation;
  }
}
