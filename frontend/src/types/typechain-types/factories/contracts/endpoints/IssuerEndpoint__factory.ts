/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  IssuerEndpoint,
  IssuerEndpointInterface,
} from "../../../contracts/endpoints/IssuerEndpoint";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "issuerStorageAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address payable",
        name: "issuerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "logoUrl",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
    ],
    name: "RegisterIssuer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "issuerAddress",
        type: "address",
      },
    ],
    name: "getIssuerByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "issuerAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "logoUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Issuer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "logoUrl",
        type: "string",
      },
    ],
    name: "registerIssuer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000cc138038062000cc18339818101604052810190620000379190620001dd565b6200005367310db9949f2378f460c01b6200017060201b60201c565b6200006f676de183329bd2beee60c01b6200017060201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000cb67ef1bec641ba781c860c01b6200017060201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001286728fe4dc2715aa97c60c01b6200017060201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200020f565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a58262000178565b9050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b600060208284031215620001f657620001f562000173565b5b60006200020684828501620001c6565b91505092915050565b610aa2806200021f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635f8818d01461003b5780638096373e1461006b575b600080fd5b610055600480360381019061005091906103d3565b610087565b6040516100629190610545565b60405180910390f35b6100856004803603810190610080919061069c565b610182565b005b61008f61031c565b6100a367b8e164284c296db960c01b610319565b6100b767263a0e9063262c1d60c01b610319565b6100cb674cc28c82b508209960c01b610319565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f8818d0836040518263ffffffff1660e01b81526004016101269190610752565b60006040518083038186803b15801561013e57600080fd5b505afa158015610152573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061017b9190610908565b9050919050565b6101966701526450fe8386df60c01b610319565b6101aa671e221d01a0be480860c01b610319565b6101be677ed590b6b29fc2c060c01b610319565b60003390506101d7678020ef46e7bb237b60c01b610319565b6101eb675538d67d07ba681d60c01b610319565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b88ece3e838787876040518563ffffffff1660e01b815260040161024e949392919061099b565b600060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102a59190610908565b90506102bb67a67a8a2d2802259a60c01b610319565b6102cf67aefbcc2f1eb261cb60c01b610319565b7f4094cf4c43c0a91e40dd2472e4ddbab69379a61eb8194598c1cf02493700d44f82868686856080015160405161030a959493929190610a04565b60405180910390a15050505050565b50565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a082610375565b9050919050565b6103b081610395565b81146103bb57600080fd5b50565b6000813590506103cd816103a7565b92915050565b6000602082840312156103e9576103e861036b565b5b60006103f7848285016103be565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561043a57808201518184015260208101905061041f565b83811115610449576000848401525b50505050565b6000601f19601f8301169050919050565b600061046b82610400565b610475818561040b565b935061048581856020860161041c565b61048e8161044f565b840191505092915050565b6104a281610395565b82525050565b6000819050919050565b6104bb816104a8565b82525050565b600060a08301600083015184820360008601526104de8282610460565b91505060208301516104f36020860182610499565b506040830151848203604086015261050b8282610460565b915050606083015184820360608601526105258282610460565b915050608083015161053a60808601826104b2565b508091505092915050565b6000602082019050818103600083015261055f81846104c1565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105a98261044f565b810181811067ffffffffffffffff821117156105c8576105c7610571565b5b80604052505050565b60006105db610361565b90506105e782826105a0565b919050565b600067ffffffffffffffff82111561060757610606610571565b5b6106108261044f565b9050602081019050919050565b82818337600083830152505050565b600061063f61063a846105ec565b6105d1565b90508281526020810184848401111561065b5761065a61056c565b5b61066684828561061d565b509392505050565b600082601f83011261068357610682610567565b5b813561069384826020860161062c565b91505092915050565b6000806000606084860312156106b5576106b461036b565b5b600084013567ffffffffffffffff8111156106d3576106d2610370565b5b6106df8682870161066e565b935050602084013567ffffffffffffffff811115610700576106ff610370565b5b61070c8682870161066e565b925050604084013567ffffffffffffffff81111561072d5761072c610370565b5b6107398682870161066e565b9150509250925092565b61074c81610395565b82525050565b60006020820190506107676000830184610743565b92915050565b600080fd5b600080fd5b600061078a610785846105ec565b6105d1565b9050828152602081018484840111156107a6576107a561056c565b5b6107b184828561041c565b509392505050565b600082601f8301126107ce576107cd610567565b5b81516107de848260208601610777565b91505092915050565b6000815190506107f6816103a7565b92915050565b610805816104a8565b811461081057600080fd5b50565b600081519050610822816107fc565b92915050565b600060a0828403121561083e5761083d61076d565b5b61084860a06105d1565b9050600082015167ffffffffffffffff81111561086857610867610772565b5b610874848285016107b9565b6000830152506020610888848285016107e7565b602083015250604082015167ffffffffffffffff8111156108ac576108ab610772565b5b6108b8848285016107b9565b604083015250606082015167ffffffffffffffff8111156108dc576108db610772565b5b6108e8848285016107b9565b60608301525060806108fc84828501610813565b60808301525092915050565b60006020828403121561091e5761091d61036b565b5b600082015167ffffffffffffffff81111561093c5761093b610370565b5b61094884828501610828565b91505092915050565b600082825260208201905092915050565b600061096d82610400565b6109778185610951565b935061098781856020860161041c565b6109908161044f565b840191505092915050565b60006080820190506109b06000830187610743565b81810360208301526109c28186610962565b905081810360408301526109d68185610962565b905081810360608301526109ea8184610962565b905095945050505050565b6109fe816104a8565b82525050565b600060a082019050610a196000830188610743565b8181036020830152610a2b8187610962565b90508181036040830152610a3f8186610962565b90508181036060830152610a538185610962565b9050610a6260808301846109f5565b969550505050505056fea2646970667358221220e32e4cca559b095735455b82e4a1032acea8550e959cdd5036b2a04970c84b8d64736f6c63430008090033";

type IssuerEndpointConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IssuerEndpointConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IssuerEndpoint__factory extends ContractFactory {
  constructor(...args: IssuerEndpointConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    issuerStorageAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IssuerEndpoint> {
    return super.deploy(
      issuerStorageAddress,
      overrides || {}
    ) as Promise<IssuerEndpoint>;
  }
  override getDeployTransaction(
    issuerStorageAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(issuerStorageAddress, overrides || {});
  }
  override attach(address: string): IssuerEndpoint {
    return super.attach(address) as IssuerEndpoint;
  }
  override connect(signer: Signer): IssuerEndpoint__factory {
    return super.connect(signer) as IssuerEndpoint__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IssuerEndpointInterface {
    return new utils.Interface(_abi) as IssuerEndpointInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IssuerEndpoint {
    return new Contract(address, _abi, signerOrProvider) as IssuerEndpoint;
  }
}
