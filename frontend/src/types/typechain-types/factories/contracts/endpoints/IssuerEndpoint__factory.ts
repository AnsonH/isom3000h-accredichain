/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  IssuerEndpoint,
  IssuerEndpointInterface,
} from "../../../contracts/endpoints/IssuerEndpoint";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "issuerStorageAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "issuerAddress",
        type: "address",
      },
    ],
    name: "getIssuerByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "issuerAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "logoUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Issuer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "issuerAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "logoUrl",
        type: "string",
      },
    ],
    name: "registerIssuer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000c4e38038062000c4e833981810160405281019061003491906101ca565b61004e67344e1ef25323243060c01b61016460201b60201c565b61006867abdcf2e42761cdc460c01b61016460201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100c267d649c9bc37c8e56d60c01b61016460201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061011d67af25a136f34ae67760c01b61016460201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101f7565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101978261016c565b9050919050565b6101a78161018c565b81146101b257600080fd5b50565b6000815190506101c48161019e565b92915050565b6000602082840312156101e0576101df610167565b5b60006101ee848285016101b5565b91505092915050565b610a4780620002076000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806331bb017a1461003b5780635f8818d01461006b575b600080fd5b610055600480360381019061005091906103b9565b61009b565b604051610062919061049d565b60405180910390f35b610085600480360381019061008091906104b8565b61019f565b604051610092919061062a565b60405180910390f35b60006100b167c1e2fb63133d2ae260c01b61029a565b6100c567f4d23ca5b6a0441360c01b61029a565b6100d9677f3df01f969a764a60c01b61029a565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b88ece3e898989898989896040518863ffffffff1660e01b815260040161014097969594939291906106a8565b602060405180830381600087803b15801561015a57600080fd5b505af115801561016e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101929190610734565b9050979650505050505050565b6101a761029d565b6101bb672b4d361e9028c99860c01b61029a565b6101cf6782e6a3ec111e00f060c01b61029a565b6101e367210a4b6c2467e2c360c01b61029a565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f8818d0836040518263ffffffff1660e01b815260040161023e9190610761565b60006040518083038186803b15801561025657600080fd5b505afa15801561026a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061029391906109c8565b9050919050565b50565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610321826102f6565b9050919050565b61033181610316565b811461033c57600080fd5b50565b60008135905061034e81610328565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261037957610378610354565b5b8235905067ffffffffffffffff81111561039657610395610359565b5b6020830191508360018202830111156103b2576103b161035e565b5b9250929050565b60008060008060008060006080888a0312156103d8576103d76102ec565b5b60006103e68a828b0161033f565b975050602088013567ffffffffffffffff811115610407576104066102f1565b5b6104138a828b01610363565b9650965050604088013567ffffffffffffffff811115610436576104356102f1565b5b6104428a828b01610363565b9450945050606088013567ffffffffffffffff811115610465576104646102f1565b5b6104718a828b01610363565b925092505092959891949750929550565b60008115159050919050565b61049781610482565b82525050565b60006020820190506104b2600083018461048e565b92915050565b6000602082840312156104ce576104cd6102ec565b5b60006104dc8482850161033f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561051f578082015181840152602081019050610504565b8381111561052e576000848401525b50505050565b6000601f19601f8301169050919050565b6000610550826104e5565b61055a81856104f0565b935061056a818560208601610501565b61057381610534565b840191505092915050565b61058781610316565b82525050565b6000819050919050565b6105a08161058d565b82525050565b600060a08301600083015184820360008601526105c38282610545565b91505060208301516105d8602086018261057e565b50604083015184820360408601526105f08282610545565b9150506060830151848203606086015261060a8282610545565b915050608083015161061f6080860182610597565b508091505092915050565b6000602082019050818103600083015261064481846105a6565b905092915050565b61065581610316565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000610687838561065b565b935061069483858461066c565b61069d83610534565b840190509392505050565b60006080820190506106bd600083018a61064c565b81810360208301526106d081888a61067b565b905081810360408301526106e581868861067b565b905081810360608301526106fa81848661067b565b905098975050505050505050565b61071181610482565b811461071c57600080fd5b50565b60008151905061072e81610708565b92915050565b60006020828403121561074a576107496102ec565b5b60006107588482850161071f565b91505092915050565b6000602082019050610776600083018461064c565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107b982610534565b810181811067ffffffffffffffff821117156107d8576107d7610781565b5b80604052505050565b60006107eb6102e2565b90506107f782826107b0565b919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561082157610820610781565b5b61082a82610534565b9050602081019050919050565b600061084a61084584610806565b6107e1565b90508281526020810184848401111561086657610865610801565b5b610871848285610501565b509392505050565b600082601f83011261088e5761088d610354565b5b815161089e848260208601610837565b91505092915050565b6000815190506108b681610328565b92915050565b6108c58161058d565b81146108d057600080fd5b50565b6000815190506108e2816108bc565b92915050565b600060a082840312156108fe576108fd61077c565b5b61090860a06107e1565b9050600082015167ffffffffffffffff811115610928576109276107fc565b5b61093484828501610879565b6000830152506020610948848285016108a7565b602083015250604082015167ffffffffffffffff81111561096c5761096b6107fc565b5b61097884828501610879565b604083015250606082015167ffffffffffffffff81111561099c5761099b6107fc565b5b6109a884828501610879565b60608301525060806109bc848285016108d3565b60808301525092915050565b6000602082840312156109de576109dd6102ec565b5b600082015167ffffffffffffffff8111156109fc576109fb6102f1565b5b610a08848285016108e8565b9150509291505056fea264697066735822122032c357d62c2cc95a963309f74e1ff0e9316ffa78bb43f4e56fb7e4574b961ab464736f6c63430008090033";

type IssuerEndpointConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IssuerEndpointConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IssuerEndpoint__factory extends ContractFactory {
  constructor(...args: IssuerEndpointConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    issuerStorageAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IssuerEndpoint> {
    return super.deploy(
      issuerStorageAddress,
      overrides || {}
    ) as Promise<IssuerEndpoint>;
  }
  override getDeployTransaction(
    issuerStorageAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(issuerStorageAddress, overrides || {});
  }
  override attach(address: string): IssuerEndpoint {
    return super.attach(address) as IssuerEndpoint;
  }
  override connect(signer: Signer): IssuerEndpoint__factory {
    return super.connect(signer) as IssuerEndpoint__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IssuerEndpointInterface {
    return new utils.Interface(_abi) as IssuerEndpointInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IssuerEndpoint {
    return new Contract(address, _abi, signerOrProvider) as IssuerEndpoint;
  }
}
