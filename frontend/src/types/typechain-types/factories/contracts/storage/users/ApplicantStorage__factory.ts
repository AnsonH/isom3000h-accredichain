/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ApplicantStorage,
  ApplicantStorageInterface,
} from "../../../../contracts/storage/users/ApplicantStorage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "applicantAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "createApplicant",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "applicantAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Applicant",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "inputAddress",
        type: "address",
      },
    ],
    name: "getApplicantByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "applicantAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Applicant",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "inputAddress",
        type: "address",
      },
    ],
    name: "isApplicantExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "certificateStorageAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "applicantEndpointAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "certificateEndpointAddress",
        type: "address",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061004567c4fb5df6a4dbd4f160c01b6100a560201b60201c565b61005f678ecf57b62f8f417660c01b6100a560201b60201c565b33600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100a8565b50565b6114cd806100b76000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063026ff3df14610051578063363bf964146100815780634bd555191461009d578063fbe2dfb9146100cd575b600080fd5b61006b60048036038101906100669190610edd565b6100fd565b604051610078919061102d565b60405180910390f35b61009b6004803603810190610096919061107b565b610444565b005b6100b760048036038101906100b29190611203565b61073c565b6040516100c4919061102d565b60405180910390f35b6100e760048036038101906100e29190610edd565b610b7d565b6040516100f4919061127a565b60405180910390f35b610105610d91565b610119676ab07e7389bc030360c01b610d83565b61012d6770a8e970f4ce0b0860c01b610d83565b610141674042b85aac34d23c60c01b610d83565b6101556750469277c70b6b0f60c01b610d83565b61016967f31fe18f70ee4ea860c01b610d83565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156101d657506101d567549e410125d55ad860c01b610d86565b5b8061024a5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610249575061024867af440c5481cda00660c01b610d86565b5b5b610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090611318565b60405180910390fd5b61029d671d9f29d4bf42659a60c01b610d83565b6102b1672a448585628fd40e60c01b610d83565b6102c567702ca010bb511f7b60c01b610d83565b6102d96743dc619edc23ca3660c01b610d83565b6102ed674b8fef38c7eb9ef060c01b610d83565b61030167eab5970c41bba20760c01b610d83565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461035b90611367565b80601f016020809104026020016040519081016040528092919081815260200182805461038790611367565b80156103d45780601f106103a9576101008083540402835291602001916103d4565b820191906000526020600020905b8154815290600101906020018083116103b757829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250509050919050565b6104586762250002fd90903560c01b610d83565b61046c67ddb26791cd84153160c01b610d83565b61048067385719a621b8a22c60c01b610d83565b61049467e57a8f0b337d95fe60c01b610d83565b6104a86733358b32a90ce53860c01b610d83565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050257600080fd5b61051667c2b2769a8a72f7f960c01b610d83565b61052a67b2840c3f681551b260c01b610d83565b61053e6774174743a5413bcf60c01b610d83565b610552677b1631865a17378b60c01b610d83565b6105666780a5cb8f6fd1ddd560c01b610d83565b61057a670cf29465c33632c060c01b610d83565b61058e670e2c6bb7efcdfe2360c01b610d83565b6105a267219317f128a3666e60c01b610d83565b60008054906101000a900460ff16156105ba57600080fd5b6105ce679b9f9b85895cf3ea60c01b610d83565b6105e267ae0ad4530fba5b4560c01b610d83565b6105f667753f4f7187c1a14b60c01b610d83565b61060a67b523e3f8e8f817c860c01b610d83565b61061e67a70322e39ce9feaa60c01b610d83565b60016000806101000a81548160ff02191690831515021790555061064c67a0283661fad6302260c01b610d83565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106a1675e81e7c2f8e57e1d60c01b610d83565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106f66744a612e160cb3ff760c01b610d83565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b610744610d91565b610758679304c632cfc89f7b60c01b610d83565b61076c67f5486d5749b333b960c01b610d83565b610780672e0028515d1a43a560c01b610d83565b61079467acb422dacdf3f1d860c01b610d83565b6107a8675bfa00a7c520ac9760c01b610d83565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90611318565b60405180910390fd5b61084c67fd4acd920ce56e3f60c01b610d83565b610860674d5cfee887e72db160c01b610d83565b61087467a0938358a980ad6760c01b610d83565b610888673e8046101f93fb5e60c01b610d83565b8261089d673604c76a4ccee91e60c01b610d83565b6108b167aef6f2184aa8d72360c01b610d83565b6108c567add8f70694e864fb60c01b610d83565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061091c6703c537e3cd4802cc60c01b610d83565b61093067988d4bb4fa2a43a360c01b610d83565b6109446712cd8356275d930360c01b610d83565b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce9061140b565b60405180910390fd5b6109eb670a24d3b1fbc5310760c01b610d83565b6109ff672ba7d15826179fa960c01b610d83565b610a136705b04eced0d1304060c01b610d83565b610a2767fa42677411c767ba60c01b610d83565b610a3b67078005b1f31a26d360c01b610d83565b610a4f6731665513b2b3e13460c01b610d83565b600060405180606001604052808681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001428152509050610a9867e40750bb93b5c93b60c01b610d83565b80600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610af4929190610dc8565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155905050610b5d6753fb4b9e34bdcd1360c01b610d83565b610b7167ba950b30c3e5371960c01b610d83565b80935050505092915050565b6000610b9367196895216eefa9a860c01b610d83565b610ba76776b83868a056251f60c01b610d83565b610bbb67a0256da4f4ab5fda60c01b610d83565b610bcf671b3da928c57c1fea60c01b610d83565b610be3672d8e66cf35ea881760c01b610d83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90611477565b60405180910390fd5b610c87672ed3c5008740c14160c01b610d83565b610c9b67dab0a0daa675f1fd60c01b610d83565b610caf677256f3a08ff5e7d660c01b610d83565b610cc3673d16ed17865af5ed60c01b610d83565b610cd76756983576fe4935d160c01b610d83565b610ceb676275f6c7e70d76e160c01b610d83565b8173ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b50565b600060019050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054610dd490611367565b90600052602060002090601f016020900481019282610df65760008555610e3d565b82601f10610e0f57805160ff1916838001178555610e3d565b82800160010185558215610e3d579182015b82811115610e3c578251825591602001919060010190610e21565b5b509050610e4a9190610e4e565b5090565b5b80821115610e67576000816000905550600101610e4f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eaa82610e7f565b9050919050565b610eba81610e9f565b8114610ec557600080fd5b50565b600081359050610ed781610eb1565b92915050565b600060208284031215610ef357610ef2610e75565b5b6000610f0184828501610ec8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f44578082015181840152602081019050610f29565b83811115610f53576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f7582610f0a565b610f7f8185610f15565b9350610f8f818560208601610f26565b610f9881610f59565b840191505092915050565b6000610fae82610e7f565b9050919050565b610fbe81610fa3565b82525050565b6000819050919050565b610fd781610fc4565b82525050565b60006060830160008301518482036000860152610ffa8282610f6a565b915050602083015161100f6020860182610fb5565b5060408301516110226040860182610fce565b508091505092915050565b600060208201905081810360008301526110478184610fdd565b905092915050565b61105881610fa3565b811461106357600080fd5b50565b6000813590506110758161104f565b92915050565b60008060006060848603121561109457611093610e75565b5b60006110a286828701611066565b93505060206110b386828701611066565b92505060406110c486828701611066565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61111082610f59565b810181811067ffffffffffffffff8211171561112f5761112e6110d8565b5b80604052505050565b6000611142610e6b565b905061114e8282611107565b919050565b600067ffffffffffffffff82111561116e5761116d6110d8565b5b61117782610f59565b9050602081019050919050565b82818337600083830152505050565b60006111a66111a184611153565b611138565b9050828152602081018484840111156111c2576111c16110d3565b5b6111cd848285611184565b509392505050565b600082601f8301126111ea576111e96110ce565b5b81356111fa848260208601611193565b91505092915050565b6000806040838503121561121a57611219610e75565b5b600061122885828601610ec8565b925050602083013567ffffffffffffffff81111561124957611248610e7a565b5b611255858286016111d5565b9150509250929050565b60008115159050919050565b6112748161125f565b82525050565b600060208201905061128f600083018461126b565b92915050565b600082825260208201905092915050565b7f43616c6c206973206e6f7420696e697469617465642066726f6d20456e64706f60008201527f696e742e00000000000000000000000000000000000000000000000000000000602082015250565b6000611302602483611295565b915061130d826112a6565b604082019050919050565b60006020820190508181036000830152611331816112f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061137f57607f821691505b6020821081141561139357611392611338565b5b50919050565b7f5468697320616464726573732068617320616c7265616479206265656e20726560008201527f676973746572656420617320616e204170706c6963616e742e00000000000000602082015250565b60006113f5603983611295565b915061140082611399565b604082019050919050565b60006020820190508181036000830152611424816113e8565b9050919050565b7f556e617574686f72697a65642066756e6374696f6e2063616c6c2e0000000000600082015250565b6000611461601b83611295565b915061146c8261142b565b602082019050919050565b6000602082019050818103600083015261149081611454565b905091905056fea2646970667358221220f6a27f13dda38e0d348e80e2a758c5bd738a85f3df64af24e9d6d25fc8fed60764736f6c63430008090033";

type ApplicantStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ApplicantStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ApplicantStorage__factory extends ContractFactory {
  constructor(...args: ApplicantStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ApplicantStorage> {
    return super.deploy(overrides || {}) as Promise<ApplicantStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ApplicantStorage {
    return super.attach(address) as ApplicantStorage;
  }
  override connect(signer: Signer): ApplicantStorage__factory {
    return super.connect(signer) as ApplicantStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ApplicantStorageInterface {
    return new utils.Interface(_abi) as ApplicantStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ApplicantStorage {
    return new Contract(address, _abi, signerOrProvider) as ApplicantStorage;
  }
}
