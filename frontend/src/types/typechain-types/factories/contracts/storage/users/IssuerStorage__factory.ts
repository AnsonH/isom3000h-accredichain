/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IssuerStorage,
  IssuerStorageInterface,
} from "../../../../contracts/storage/users/IssuerStorage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "inputAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "logoUrl",
        type: "string",
      },
    ],
    name: "createIssuer",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "issuerAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "logoUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Issuer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "inputAddress",
        type: "address",
      },
    ],
    name: "getIssuerByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "issuerAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "logoUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct Issuer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "inputAddress",
        type: "address",
      },
    ],
    name: "isIssuerExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accreditationStorageAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "certificateStorageAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "issuerEndpointAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "certificateEndpointAddress",
        type: "address",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b506100456743b9b99e46ee2a6e60c01b6100a560201b60201c565b61005f6775cc79f9446f3c0960c01b6100a560201b60201c565b33600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100a8565b50565b6117d3806100b76000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806325a0d3bb146100515780634a945f8d146100815780635f8818d01461009d578063b88ece3e146100cd575b600080fd5b61006b6004803603810190610066919061113c565b6100fd565b6040516100789190611184565b60405180910390f35b61009b600480360381019061009691906111dd565b610392565b005b6100b760048036038101906100b2919061113c565b6106e0565b6040516100c49190611389565b60405180910390f35b6100e760048036038101906100e291906114e0565b610b4b565b6040516100f49190611389565b60405180910390f35b60006101136741462fc8ad2b348960c01b610fd4565b6101276754090e0288c82a2160c01b610fd4565b61013b6761f4e827c34d61ed60c01b610fd4565b61014f67ee9bdcd80d6ab7fd60c01b610fd4565b61016367b27ec8ed1b65446e60c01b610fd4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156101cf57506101ce6615cdaec364af0560c01b610fd7565b5b806102435750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561024257506102416742532d7ceda2d05860c01b610fd7565b5b5b610282576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610279906115f8565b60405180910390fd5b61029667e28a49bef3057b8a60c01b610fd4565b6102aa6758f11e79f3fe7ef860c01b610fd4565b6102be673d2ed24a702716ce60c01b610fd4565b6102d2675b33f9b107af184460c01b610fd4565b6102e6673f328cf076bd262d60c01b610fd4565b6102fa67d0899032ce2e8b7060c01b610fd4565b8173ffffffffffffffffffffffffffffffffffffffff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6103a6676f688d10c0585d0760c01b610fd4565b6103ba67906d0702eeb8837f60c01b610fd4565b6103ce67076ad9ffb47cd58160c01b610fd4565b6103e26720378038e7b0d3b460c01b610fd4565b6103f667e3d0d8bd04917b1860c01b610fd4565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045057600080fd5b61046467123696e3c550680b60c01b610fd4565b610478676e37bf63218bfc6860c01b610fd4565b61048c678619d07c664677ba60c01b610fd4565b6104a067bdeee3144c929cf960c01b610fd4565b6104b467bf6bdc7b239c9aef60c01b610fd4565b6104c867e87902144f5b205a60c01b610fd4565b6104dc6781362f0187017f7460c01b610fd4565b6104f0678e79a7377cc3651b60c01b610fd4565b60008054906101000a900460ff161561050857600080fd5b61051c67cfefff6225c8fa3c60c01b610fd4565b61053067c23f3955cb7b77ba60c01b610fd4565b610544679053c1cdd472891e60c01b610fd4565b61055867b1a663622bb6aeb360c01b610fd4565b61056c67d77b936717e34a5e60c01b610fd4565b60016000806101000a81548160ff02191690831515021790555061059a6702981a5621bbab3b60c01b610fd4565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105ef671f7a3b6fb3b5f91560c01b610fd4565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610644679ac0add5be70231160c01b610fd4565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061069967b281ea6a2b48c88d60c01b610fd4565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6106e8610fe2565b6106fc6738d79b0ecb3c400060c01b610fd4565b61071067bb5fb66633b48f5360c01b610fd4565b6107246779cbb48dbf8b00bc60c01b610fd4565b61073867db1c1fd36d6951a060c01b610fd4565b61074c67c55c306fe51bf94060c01b610fd4565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156107b957506107b8675c851d63d010a2e160c01b610fd7565b5b8061082d5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561082c575061082b673a47880ebded47b660c01b610fd7565b5b5b61086c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639061168a565b60405180910390fd5b610880675c7cdccff2e5d3cc60c01b610fd4565b61089467993d0df0e5d34a5460c01b610fd4565b6108a8676298a5ba3a0c983260c01b610fd4565b6108bc67868425d5105905be60c01b610fd4565b6108d0670bb8bbc1decbe58660c01b610fd4565b6108e467d3aad06fac4434cb60c01b610fd4565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201805461093e906116d9565b80601f016020809104026020016040519081016040528092919081815260200182805461096a906116d9565b80156109b75780601f1061098c576101008083540402835291602001916109b7565b820191906000526020600020905b81548152906001019060200180831161099a57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610a26906116d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a52906116d9565b8015610a9f5780601f10610a7457610100808354040283529160200191610a9f565b820191906000526020600020905b815481529060010190602001808311610a8257829003601f168201915b50505050508152602001600382018054610ab8906116d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae4906116d9565b8015610b315780601f10610b0657610100808354040283529160200191610b31565b820191906000526020600020905b815481529060010190602001808311610b1457829003601f168201915b505050505081526020016004820154815250509050919050565b610b53610fe2565b610b67672406af0f528a1a7c60c01b610fd4565b610b7b67c6e5d3a6c916b0aa60c01b610fd4565b610b8f670d90743735b2061260c01b610fd4565b610ba3678ba9e307796aba3f60c01b610fd4565b610bb76795aa44d94bd5ddd760c01b610fd4565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e9061168a565b60405180910390fd5b610c5b6733577a412266386460c01b610fd4565b610c6f679820e0e088c66fa360c01b610fd4565b610c83676250b02baa249c8a60c01b610fd4565b610c976726f530c6cc3e4ef860c01b610fd4565b84610cac67d869804e8e56d98660c01b610fd4565b610cc0674d34f67573b679c160c01b610fd4565b610cd467c83c32a687f65c1d60c01b610fd4565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610d2b678cd920800fda03dd60c01b610fd4565b610d3f67f47caaf1defac4e660c01b610fd4565b610d53670bf164865521dbde60c01b610fd4565b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610de6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddd9061177d565b60405180910390fd5b610dfa67624bc980f44548d460c01b610fd4565b610e0e6736bef35059d671a560c01b610fd4565b610e2267fb66370d1423dd9260c01b610fd4565b610e366785dea614d658527e60c01b610fd4565b610e4a6740c64a6f9df859cc60c01b610fd4565b610e5e678e3d7a110954607760c01b610fd4565b60006040518060a001604052808881526020018973ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001428152509050610eb367eef6202bb69bffe960c01b610fd4565b80600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610f0f929190611027565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610f73929190611027565b506060820151816003019080519060200190610f90929190611027565b5060808201518160040155905050610fb2671646e424c246d3e960c01b610fd4565b610fc667cddac06495e7fa1660c01b610fd4565b809350505050949350505050565b50565b600060019050919050565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b828054611033906116d9565b90600052602060002090601f016020900481019282611055576000855561109c565b82601f1061106e57805160ff191683800117855561109c565b8280016001018555821561109c579182015b8281111561109b578251825591602001919060010190611080565b5b5090506110a991906110ad565b5090565b5b808211156110c65760008160009055506001016110ae565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611109826110de565b9050919050565b611119816110fe565b811461112457600080fd5b50565b60008135905061113681611110565b92915050565b600060208284031215611152576111516110d4565b5b600061116084828501611127565b91505092915050565b60008115159050919050565b61117e81611169565b82525050565b60006020820190506111996000830184611175565b92915050565b60006111aa826110de565b9050919050565b6111ba8161119f565b81146111c557600080fd5b50565b6000813590506111d7816111b1565b92915050565b600080600080608085870312156111f7576111f66110d4565b5b6000611205878288016111c8565b9450506020611216878288016111c8565b9350506040611227878288016111c8565b9250506060611238878288016111c8565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127e578082015181840152602081019050611263565b8381111561128d576000848401525b50505050565b6000601f19601f8301169050919050565b60006112af82611244565b6112b9818561124f565b93506112c9818560208601611260565b6112d281611293565b840191505092915050565b6112e6816110fe565b82525050565b6000819050919050565b6112ff816112ec565b82525050565b600060a083016000830151848203600086015261132282826112a4565b915050602083015161133760208601826112dd565b506040830151848203604086015261134f82826112a4565b9150506060830151848203606086015261136982826112a4565b915050608083015161137e60808601826112f6565b508091505092915050565b600060208201905081810360008301526113a38184611305565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113ed82611293565b810181811067ffffffffffffffff8211171561140c5761140b6113b5565b5b80604052505050565b600061141f6110ca565b905061142b82826113e4565b919050565b600067ffffffffffffffff82111561144b5761144a6113b5565b5b61145482611293565b9050602081019050919050565b82818337600083830152505050565b600061148361147e84611430565b611415565b90508281526020810184848401111561149f5761149e6113b0565b5b6114aa848285611461565b509392505050565b600082601f8301126114c7576114c66113ab565b5b81356114d7848260208601611470565b91505092915050565b600080600080608085870312156114fa576114f96110d4565b5b600061150887828801611127565b945050602085013567ffffffffffffffff811115611529576115286110d9565b5b611535878288016114b2565b935050604085013567ffffffffffffffff811115611556576115556110d9565b5b611562878288016114b2565b925050606085013567ffffffffffffffff811115611583576115826110d9565b5b61158f878288016114b2565b91505092959194509250565b600082825260208201905092915050565b7f556e617574686f72697a65642066756e6374696f6e2063616c6c2e0000000000600082015250565b60006115e2601b8361159b565b91506115ed826115ac565b602082019050919050565b60006020820190508181036000830152611611816115d5565b9050919050565b7f43616c6c206973206e6f7420696e697469617465642066726f6d20456e64706f60008201527f696e742e00000000000000000000000000000000000000000000000000000000602082015250565b600061167460248361159b565b915061167f82611618565b604082019050919050565b600060208201905081810360008301526116a381611667565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806116f157607f821691505b60208210811415611705576117046116aa565b5b50919050565b7f5468697320616464726573732068617320616c7265616479206265656e20726560008201527f676973746572656420617320616e204973737565722e00000000000000000000602082015250565b600061176760368361159b565b91506117728261170b565b604082019050919050565b600060208201905081810360008301526117968161175a565b905091905056fea2646970667358221220fd276e84d3fad02afda0534f8a8654073b28a08efec46393e3d87ac40b53b2e864736f6c63430008090033";

type IssuerStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IssuerStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IssuerStorage__factory extends ContractFactory {
  constructor(...args: IssuerStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IssuerStorage> {
    return super.deploy(overrides || {}) as Promise<IssuerStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): IssuerStorage {
    return super.attach(address) as IssuerStorage;
  }
  override connect(signer: Signer): IssuerStorage__factory {
    return super.connect(signer) as IssuerStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IssuerStorageInterface {
    return new utils.Interface(_abi) as IssuerStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IssuerStorage {
    return new Contract(address, _abi, signerOrProvider) as IssuerStorage;
  }
}
