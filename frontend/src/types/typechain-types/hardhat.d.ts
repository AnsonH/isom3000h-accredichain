/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccreditationEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccreditationEndpoint__factory>;
    getContractFactory(
      name: "ApplicantEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApplicantEndpoint__factory>;
    getContractFactory(
      name: "CertificateEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CertificateEndpoint__factory>;
    getContractFactory(
      name: "IssuerEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IssuerEndpoint__factory>;
    getContractFactory(
      name: "AccreditationNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccreditationNFT__factory>;
    getContractFactory(
      name: "CertificateNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CertificateNFT__factory>;
    getContractFactory(
      name: "AccreditationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccreditationStorage__factory>;
    getContractFactory(
      name: "CertificateStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CertificateStorage__factory>;
    getContractFactory(
      name: "ApplicantStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApplicantStorage__factory>;
    getContractFactory(
      name: "IssuerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IssuerStorage__factory>;

    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccreditationEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccreditationEndpoint>;
    getContractAt(
      name: "ApplicantEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApplicantEndpoint>;
    getContractAt(
      name: "CertificateEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CertificateEndpoint>;
    getContractAt(
      name: "IssuerEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IssuerEndpoint>;
    getContractAt(
      name: "AccreditationNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccreditationNFT>;
    getContractAt(
      name: "CertificateNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CertificateNFT>;
    getContractAt(
      name: "AccreditationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccreditationStorage>;
    getContractAt(
      name: "CertificateStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CertificateStorage>;
    getContractAt(
      name: "ApplicantStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApplicantStorage>;
    getContractAt(
      name: "IssuerStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IssuerStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
